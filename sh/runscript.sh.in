#!@SHELL@
# Shell wrapper for runscript

# Copyright (c) 2007-2009 Roy Marples <roy@marples.name>
# Released under the 2-clause BSD license.

sourcex()
{
	if [ "$1" = "-e" ]; then
		shift
		[ -e "$1" ] || return 1
	fi
	if ! . "$1"; then
		eerror "$RC_SVCNAME: error loading $1"
		exit 1
	fi
}

loadconfig()
{
	# If we're net.eth0 or openvpn.work then load net or openvpn config
	_c=${RC_SVCNAME%%.*}
	if [ -n "$_c" -a "$_c" != "$RC_SVCNAME" ]; then
		if ! sourcex -e "$1/$_c.$RC_RUNLEVEL"; then
			sourcex -e "$1/$_c"
		fi
	fi
	unset _c

	# Overlay with our specific config
	if ! sourcex -e "$1/$RC_SVCNAME.$RC_RUNLEVEL"; then
		sourcex -e "$1/$RC_SVCNAME"
	fi
}

sourcex "@SYSCONFDIR@/init.d/functions.sh"
sourcex "@LIBEXECDIR@/sh/rc-functions.sh"

# Support LiveCD foo
if sourcex -e "/sbin/livecd-functions.sh"; then
	livecd_read_commandline
fi

if [ ! -e ${RC_SVCDIR}/softlevel ]; then
	eerror "You are attempting to run an openrc service on a"
	eerror "system which openrc did not boot."
	eerror "You may be inside a chroot or you may have used"
	eerror "another initialization system to boot this system."
	eerror "In this situation, you will get unpredictable results!"
	eerror
	eerror "If you really want to do this, issue the following command:"
	eerror "touch ${RC_SVCDIR}/softlevel"
	exit 1
fi

if [ -z "$1" -o -z "$2" ]; then
	eerror "$RC_SVCNAME: not enough arguments"
	exit 1
fi

# So daemons know where to recall us if needed
export RC_SERVICE="$1"
shift

# Compat
export SVCNAME=$RC_SVCNAME

# Dependency function
config() {
	[ -n "$*" ] && echo "config $*"
}
need() {
	[ -n "$*" ] && echo "need $*"
}
use() {
	[ -n "$*" ] && echo "use $*"
}
before() {
	[ -n "$*" ] && echo "before $*"
}
after() {
	[ -n "$*" ] && echo "after $*"
}
provide() {
	[ -n "$*" ] && echo "provide $*"
}
keyword() {
	[ -n "$*" ] && echo "keyword $*"
}

# Describe the init script to the user
describe()
{
	if [ -n "$description" ]; then
		einfo "$description"
	else
		ewarn "No description for $RC_SVCNAME"
	fi

	local svc= desc=
	for svc in ${extra_commands:-$opts} $extra_started_commands \
		$extra_stopped_commands; do
		eval desc=\$description_$svc
		if [ -n "$desc" ]; then
			einfo "$HILITE$svc$NORMAL: $desc"
		else
			ewarn "$HILITE$svc$NORMAL: no description"
		fi
	done
}

# Report status
_status()
{
	if service_stopping; then
		ewarn "status: stopping"
		return 4
	elif service_starting; then
		ewarn "status: starting"
		return 8
	elif service_inactive; then
		ewarn "status: inactive"
		return 16
	elif service_started; then
		if service_crashed; then
			eerror "status: crashed"
			return 32
		fi
		einfo "status: started"
		return 0
	else
		einfo "status: stopped"
		return 3
	fi
}

# Template start / stop / status functions
start()
{
	[ -n "$command" ] || return 0
	local _background=
	ebegin "Starting ${name:-$RC_SVCNAME}"
	if yesno "${command_background}"; then
		_background="--background --pidfile"
	fi
	if yesno "$start_inactive"; then
		local _inactive=false
		service_inactive && _inactive=true
		mark_service_inactive
	fi
	eval start-stop-daemon --start \
		--exec $command \
		${procname:+--name} $procname \
		${pidfile:+--pidfile} $pidfile \
		$_background $start_stop_daemon_args \
		-- $command_args
	eend $? "Failed to start $RC_SVCNAME" && return 0
	if yesno "$start_inactive"; then
		if ! $_inactive; then
			mark_service_stopped
		fi
	fi
	return 1
}

stop()
{
	[ -n "$command" -o -n "$procname" -o -n "$pidfile" ] || return 0
	ebegin "Stopping ${name:-$RC_SVCNAME}"
	start-stop-daemon --stop \
		${command:+--exec} $command \
		${procname:+--name} $procname \
		${pidfile:+--pidfile} $pidfile \
		${stopsig:+--signal} $stopsig
	eend $? "Failed to stop $RC_SVCNAME"
}

status()
{
	_status
}

yesno $RC_DEBUG && set -x

if ! loadconfig "${RC_SERVICE%/*}/../conf.d"; then
		loadconfig "@SYSCONFDIR@/conf.d"
fi

# Load any system overrides
sourcex -e "@SYSCONFDIR@/rc.conf"

# Attach to CGroup - dir existing is enough for us
if [ -d /sys/fs/cgroup/ ]; then
	# use RC_SVCNAME unless overridden in conf.d
	SVC_CGROUP=${rc_cgroup:-$RC_SVCNAME}
	mkdir -p /sys/fs/cgroup/${SVC_CGROUP}
	for f in cpuset.cpus cpuset.mems; do
		if [ -f /sys/fs/cgroup/${f} ]; then
			cp /sys/fs/cgroup/${f} /sys/fs/cgroup/${SVC_CGROUP}
		fi
	done
	# now attach self to cgroup - any children of this process will inherit this
	echo $$ > /sys/fs/cgroup/${SVC_CGROUP}/tasks
	# TODO: set res limits from conf.d
fi

# Apply any ulimit defined
[ -n "${rc_ulimit:-$RC_ULIMIT}" ] && ulimit ${rc_ulimit:-$RC_ULIMIT}

# Load our script
sourcex "$RC_SERVICE"

for _d in $required_dirs; do
	if [ ! -d $_d ]; then
		eerror "$RC_SVCNAME: \`$_d' is not a directory"
		exit 1
	fi
done
unset _d

for _f in $required_files; do
	if [ ! -r $_f ]; then
		eerror "$RC_SVCNAME: \`$_f' is not readable"
		exit 1
	fi
done
unset _f

if [ -n "$opts" ]; then
		ewarn "Use of the opts variable is deprecated and will be"
		ewarn "removed in the future."
		ewarn "Please use extra_commands, extra_started_commands or extra_stopped_commands."
fi

while [ -n "$1" ]; do
	# Special case depend
	if [ "$1" = depend ]; then
		shift
		_depend
		continue
	fi
	# See if we have the required function and run it
	for _cmd in describe start stop status ${extra_commands:-$opts} \
		$extra_started_commands $extra_stopped_commands
	do
		if [ "$_cmd" = "$1" ]; then
			if [ "$(command -v "$1")" = "$1" ]; then
				# If we're in the background, we may wish to
				# fake some commands. We do this so we can
				# "start" ourselves from inactive which then
				# triggers other services to start which
				# depend on us.
				# A good example of this is openvpn.
				if yesno $IN_BACKGROUND; then
					for _cmd in $in_background_fake; do
						if [ "$_cmd" = "$1" ]; then
							shift
							continue 3
						fi
					done
				fi
				# Check to see if we need to be started before
				# we can run this command
				for _cmd in $extra_started_commands; do
					if [ "$_cmd" = "$1" ]; then
						if ! service_started; then
							eerror "$RC_SVCNAME: cannot \`$1' as it has not been started"
							exit 1
						fi
					fi
				done
				# Check to see if we need to be stopped before
				# we can run this command
				for _cmd in $extra_stopped_commands; do
					if [ "$_cmd" = "$1" ]; then
						if ! service_stopped; then
							eerror "$RC_SVCNAME: cannot \`$1' as it has not been stopped"
							exit 1
						fi
					fi
				done
				unset _cmd
				if [ "$(command -v "$1_pre")" = "$1_pre" ]
				then
					"$1"_pre || exit $?
				fi
				"$1" || exit $?
				if [ "$(command -v "$1_post")" = "$1_post" ]
				then
					"$1"_post || exit $?
				fi
				shift
				continue 2
			else
				if [ "$_cmd" = "start" -o "$_cmd" = "stop" ]
				then
					shift
					continue 2
				else
					eerror "$RC_SVCNAME: function \`$1' defined but does not exist"
					exit 1
				fi
			fi
		fi
	done
	eerror "$RC_SVCNAME: unknown function \`$1'"
	exit 1
done

# CGroup cleanup
if [ -d /sys/fs/cgroup/ ]; then
	# use RC_SVCNAME unless overridden in conf.d
	SVC_CGROUP=${rc_cgroup:-$RC_SVCNAME}
	# reattach to root cgroup
	echo $$ > /sys/fs/cgroup/tasks
	# remove cgroup if empty, will fail if any task attached
	rmdir  /sys/fs/cgroup/${SVC_CGROUP} 2>/dev/null
fi

exit 0
