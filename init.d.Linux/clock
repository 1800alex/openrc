#!/sbin/runscript
# Copyright 2007 Roy Marples
# All rights reserved

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

extra_commands="save show"

description="Sets the local clock to UTC or Local Time." 
description_save="Saves the current time in the BIOS."
description_show="Displays the current time in the BIOS."

clock_adjfile=${clock_adjfile:-${CLOCK_ADJFILE}}
clock_args=${clock_args:-${CLOCK_OPTS}}
clock_systohc=${clock_systohc:-${CLOCK_SYSTOHC}}

clock=${clock:-${CLOCK:-UTC}}
if [ "${clock}" = "UTC" ]; then
	utc="UTC"
	utc_cmd="--utc"
else
	utc="Local Time"
	utc_cmd="--localtime"
fi

depend() {
	if yesno ${clock_adjfile}; then
		use checkroot
	else
		before *
	fi
}

setupopts() {
	utc=
	case "${RC_SYS}" in
		UML|VPS|XEN)
			utc="${RC_SYS}"
			;;
		*)
			case "$(uname -m)" in
				s390*)
					utc="s390"
					;;
				*)
					if [ -e /proc/devices ] && grep -q " cobd$" /proc/devices; then
						utc="coLinux"
					fi
					;;
			esac
			;;
	esac

	case "${utc}" in
		UTC|Local" "Time);;
		*) unset utc_cmd;;
	esac
}

start() {
	local retval=0 errstr=""
	setupopts

	ebegin "Setting system clock using the hardware clock [${utc}]"
	if [ -n "${utc_cmd}" ]; then
		if [ -e /proc/modules -a ! -e /dev/rtc ]; then
			modprobe -q rtc || modprobe -q genrtc
		fi

		# Since hwclock always exit's with a 0, need to check its output.
		if [ -e /etc/adjtime ] && yesno ${clock_adjfile}; then
			errstr="$(hwclock --adjust ${utc_cmd} 2>&1 >/dev/null)"
		fi
		# If setting UTC, don't bother to run hwclock when first booting
		# as that's the default
		if [ "${PREVLEVEL}" != "N" -o "${utc_cmd}" != "--utc" -o -n "${clock_args}" ]; then
			errstr="${errstr}$(hwclock --hctosys ${utc_cmd} ${clock_args} 2>&1 >/dev/null)"
		fi
	fi
	if [ -n "${errstr}" ]; then
		ewarn "${errstr}"
		retval=1
	fi
	errstr="Failed to set clock"
	eend ${retval} "${errstr}" "You will need to set the clock yourself"

	return 0
}

stop() {
	# Don't tweak the hardware clock on LiveCD halt.
	[ -n "${CDBOOT}" ] && return 0
	yesno ${clock_systohc} || return 0

	local retval=0 errstr=""
	setupopts

	ebegin "Setting hardware clock using the system clock" "[${utc}]"
	if [ -n "${utc_cmd}" ]; then
		if ! yesno "${clock_adjfile}"; then
			# Some implementations don't handle adjustments
			if LC_ALL=C hwclock --help | grep -q "\-\-noadjfile"; then
				utc_cmd="${utc_cmd} --noadjfile"
			fi
		fi
		errstr="$(LC_ALL=C hwclock --systohc ${utc_cmd} ${clock_args} 2>&1 >/dev/null)"
	fi
	if [ -n "${errstr}" ]; then
		ewarn "${errstr}"
		retval=1
	fi
	errstr="Failed to sync clocks"
	eend ${retval} "${errstr}"
}

save() {
	clock_systohc="yes"
	stop
}

show() {
	setupopts
	hwclock --show "${utc_cmd}" ${clock_args} 
}

# vim: set ts=4 :
