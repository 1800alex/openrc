#!/sbin/runscript
# Copyright 1999-2007 Gentoo Foundation
# Copyright 2007 Roy Marples
# All rights reserved

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

description="Loads a user defined list of kernel modules."

depend() {
	need checkroot
	use isapnp
}

load_modules() {
	local modules=""
	local config="$1"

	[ -z "${config}" -o ! -r "${config}" ] && return 0

	eval set -- $(sed -e 's:#.*::' -e '/^[[:space:]]*$/d' \
	-e "s/'/'\\\\''/g" -e "s/^/'/g" -e "s/$/'/g" "${config}")
	[ $# = 0 ] && return 0

	einfo "Using ${config} as config:"
	eindent

	local x= cnt=0
	for x in "$@" ; do
		set -- ${x}
		ebegin "Loading module $1"
		eval modprobe -q "$@"
		eend $? "Failed to load $1" && cnt=$((${cnt} + 1))
	done

	einfo "Autoloaded ${cnt} module(s)"

	return 0
}

start() {
	# Should not fail if kernel do not have module
	# support compiled in ...
	[ ! -f /proc/modules -o "${RC_SYS}" = "VPS" ] && return 0

	local KV=$(uname -r)
	local KV_MAJOR=${KV%%.*}
	local x=${KV#*.}
	local KV_MINOR=${x%%.*}
	x=${KV#*.*.}
	local KV_MICRO=${x%%-*}

	# Make sure depmod from modutils do not whine, but do not bother if
	# we are on a 2.6 kernel without modprobe.old
	if [ -z "${CDBOOT}"  -a ! -e /etc/modules.conf ] && \
	   [ $(KV_to_int "${KV}") -lt $(KV_to_int '2.5.48') -o -x /sbin/modprobe.old ]
	then
		echo '### This file is automatically generated by update-modules' \
			> /etc/modules.conf 2>/dev/null
		[ ! -f /etc/modules.conf ] && \
			ewarn "Cannot update /etc/modules.conf!"
	fi
	
	# Only do this if we have modules.conf or a 2.6 kernel
	if [ -z "${CDBOOT}" ] && \
	   [ -f /etc/modules.conf -o $(KV_to_int "${KV}") -ge $(KV_to_int '2.5.48') ]
	then
		/sbin/update-modules 
	fi

	local auto=""
	if [ -f /etc/modules.autoload -a ! -L /etc/modules.autoload ]; then
		auto=/etc/modules.autoload
	else
		local x= f="/etc/modules.autoload.d/kernel"
		for x in "${KV}" ${KV_MAJOR}.${KV_MINOR}.${KV_MICRO} ${KV_MAJOR}.${KV_MINOR} ; do
			if [ -f "${f}-${x}.${RC_SOFTLEVEL}" ] ; then
				auto="${f}-${x}.${RC_SOFTLEVEL}"
				break
			fi
			if [ "${RC_SOFTLEVEL}" = "${RC_BOOTLEVEL}" -a -f "${f}-${x}.${RC_DEFAULTLEVEL}" ] ; then
				auto="${f}-${x}.${RC_DEFAULTLEVEL}"
				break
			fi
			if [ -f "${f}-${x}" ] ; then
				auto="${f}-${x}"
				break
			fi
		done
	fi
	[ -n "${auto}" ] && load_modules "${auto}"

	#
	# Just in case a sysadmin prefers generic symbolic links in
	# /lib/modules/boot for boot time modules we will load these modules
	#
	[ -n "$(modprobe -l -t boot)" ] && modprobe -a -t boot \* 2>/dev/null
	
	# Above test clobbers the return
	return 0
}


# vim:ts=4
